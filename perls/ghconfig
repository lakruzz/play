#!/usr/bin/perl
require 5.14.0;
use strict;                # http://perldoc.perl.org/strict.html
use Carp;                  # http://perldoc.perl.org/Carp.html
use Cwd;                   # http://perldoc.perl.org/Cwd.html
use Data::Dumper;          # https://perldoc.perl.org/Data/Dumper.html

# File version
our $VERSION    = "1.0";                             #major.minor
our $PATCH      = "0";                               #patch

use Getopt::Long;          # http://perldoc.perl.org/Getopt/Long.html
use Pod::Usage;            # http://perldoc.perl.org/Pod/Usage.html
use File::Basename;        # http://perldoc.perl.org/File/Basename.html

my $scriptdir = dirname(__FILE__);

# Assume local modules are in sub folders relative to this script
use lib dirname(__FILE__).'/modules';
use YAML::Tiny;            # http://search.cpan.org/dist/YAML-Tiny/lib/YAML/Tiny.pm

# Holds the global variables that are used to cache the value of our options
our %Options;
our %Props;
my %tmp_options;

%Options = (
  config => ".github/config.yml",
  dryrun => 0,
  debug => 0,
  verbose => 0
);

%Props = (
  defaults => {
                color            => '{color}',
                suffix           => '{suffix}',
                prefix           => '{prefix}',
                delimiter_suffix => '{delimiter}->{suffix}',
                delimiter_prefix => '{delimiter}->{prefix}',
                description      => '{description}'
              },
  label    => {
                name             => '{name}',
                description      => '{description}',
                color            => '{color}'
              }
);

GetOptions(
  (
    "build"                => \$Options{build},
    "config=s"             => \$Options{config},
    "token=s"              => \$Options{token},
		"verbose!"             => \$tmp_options{verbose},
    "debug!"               => \$tmp_options{debug},
		"dryrun!"              => \$tmp_options{dryrun},
		"help"                 => sub { pod2usage(-exitval => 0, -verbose => 1) },
    "man"                  => sub { pod2usage(-exitval => 0, -verbose => 3) }
	)
) || pod2usage(-exitval => 1, -verbose => 0);

defined( $Options{build} ) || pod2usage(
	-exitval => 1,
	-verbose => 0,
	-message => "--build is required");

our $Yaml = YAML::Tiny->read( $Options{config}) || croak;

defined $Yaml->[0]->{github}->{labels} ||
  croak "No labels defined in the configuration...\n";


# Updating to any updates applied as run parameters
defined $tmp_options{verbose} && do {$Options{verbose} = $tmp_options{verbose}};
defined $tmp_options{debug}   && do {$Options{debug} = $tmp_options{debug}};
defined $tmp_options{dryrun}  && do {$Options{dryrun} = $tmp_options{dryrun}};

$Options{debug} && print "\$VAR1 = \%Options:\n".Dumper(\%Options);
$Options{debug} && print "\$VAR1 = \$Yaml->[0]->{github}:\n".Dumper(\$Yaml->[0]->{github});

#########  Main program  ########################
my @labels;
compile_labels(\@labels);
print Dumper(\@labels);
die;

read_lines();

exit(0);
#########  Functions  ###########################


sub compile_labels($){
  my $labels_ref = shift;
  foreach my $group ( sort(keys($Yaml->[0]->{github}{labels})) ){
    my %values;
    insert_props("{github}{labels}{default}", 'defaults', \%values);
    if ($group ne 'default'){
      insert_props("{github}{labels}{$group}", 'defaults', \%values);
    }

    my $labels =      parse("{github}{labels}{$group}{labels}");
    foreach my $label (keys(@$labels)){
      insert_props("{github}{labels}{$group}{labels}[$label]{label}", 'label', \%values);
    #  print Dumper(\%values);

      my $name        = (defined($values{prefix}) ? $values{prefix}.$values{delimiter_prefix} : '').$values{name};
      my $description = $values{description}.(defined($values{suffix}) ? $values{delimiter_suffix}.$values{suffix} : '');

      push(@$labels_ref, { name         => $name,
                           description  => $description,
                           color        => $values{color}
                         }
      );
    }
  }
}

sub run($){
  my $run = shift;
  defined $run->{caption} && do { print $run->{caption}."...\n"};
  print cmd(
    command    => $run->{command},
    dryrun     => $Options{dryrun},
    verbose    => $Options{verbose},
    debug      => $Options{debug},
    die_on_err => to_boolean($run->{die_on_err}),
    errmsg     => $run->{errmsg}
  );
}


sub parse($){
  # The parameter is a string, that defined the path to a node in the %hash
  # returns undefined if invalid
  # otherwise it returns the node which can be any of
  #   SCALAR
  #   ARRAY
  #   HASH
  my $node = shift;
  eval("return \$Yaml->[0]->$node;");
}


sub insert_props($$$){
  my $node = shift;
  my $scheme = shift;
  my $hashref = shift;
  foreach my $prop (keys($Props{$scheme})){
    parse($node.$Props{$scheme}{$prop}) && do { $hashref->{$prop} = parse($node.$Props{$scheme}{$prop}) };
  }
}


sub cmd ($) {
# Safe execution of shell commands
# Input is a hash containing the options and parameters to execute:
#
# command      [requied]      The command to execute
# die_on_err   [optional=1]   When set to true, the program will terminate,
#                             using croak, if the command execution returns
#                             a non-zero value.
# verbose      [optional=0]   When true, the command will be typed to STDOUT
#                             just prior to execution.
# return_array [optional=0]   When true result returns an array, false returns
#                             scalar.
# merge_errout [optional=1]   True merges ERROUT into STDOUT, false returns only
#                             STDOUT, ERROUT is unhandled (still prints)
#
# The example below executes 'git push' in verbose mode, and continues even if
# it fails - The return code is (as always) available from $?
#
#my $res =	cmd(
#		command => 'git push',
#		verbose => $Options{verbose},
#   die_on_error => 0 );

    my %opt = @_;
    croak "input parameter for key 'command' required" unless ( $opt{command} );

    # Deal with defaults if unset
		defined( $opt{command} )      ||  do { croak "input parameter for key 'command' required" };
    defined( $opt{die_on_err} )   ||  do {$opt{die_on_err}   = 1};
		defined( $opt{merge_errout} ) ||  do {$opt{merge_errout} = 1};
		defined( $opt{verbose} )      ||  do {$opt{verbose}      = 0};
    defined( $opt{dryrun} )       ||  do {$opt{dryrun}       = 0};
  	defined( $opt{return_array} ) ||  do {$opt{return_array} = 0};
    defined( $opt{errmsg} )       ||  do {$opt{errmsg}   = undef};
    defined( $opt{debug})         ||  do {$opt{debug}        = 0};

    if ($opt{dryrun} ){ $opt{verbose} = 1};

    $opt{debug} && do { foreach my $key (keys(%opt)){ print "  $key:$opt{$key}\n"} };

    # merge_errout
		my $cmd = ( $opt{merge_output} )? $opt{command} . ' 2>&1' : $opt{command};

    # verbose
    my @res;
    $opt{dryrun} && print "Running DRY:  ";
		$opt{verbose} && print $opt{command}."\n";
    $opt{dryrun} || do {@res = qx($cmd)};

    # die_on_err
    if ( $opt{die_on_err} ) {
        if ($?) {
            my $msg = defined($opt{errmsg})?
              $opt{errmsg} :
              "Execution of [$cmd] returned a non-zero value (".( ($?) / 256 ).")";
            croak $msg ;
            print $msg ;
            die;
        }
    };

		# return_array
    return ( $opt{return_array} ) ? @res : join( '', @res );

}

__END__


#########  Plain Old Documentation ##############

# Below is all the POD documentation following the conventional chapters
# as described in (http://perldoc.perl.org/perlpod.html).

=pod

=head1 NAME

GHCONFIG - A declarative approach to configuring the repo on GitHub

=head1 SYNOPSIS

  ghconfig build [--config CONFIGURATION] [--[no]verbose] [--dryrun]
  ghconfig --help | --man

=head1 SUBCOMMANDS

=head2 build

  ghconfig build

=over 2

Will execute the configuration and bring the repo on GitHub to the state described
in there.

=back

=head3 OPTIONS


  --config CONFIGURATION
  --token  TOKEN
  --verbose
  --dryrun

=over 2

C<--config CONFIGURATION>

Optional: The default is '<repo-root>.github/config.yml'

C<--token TOKEN>

Optional: A developer token that allows write access to the repo. If the parameter is left out, the script reads the token from C<git config github.token>.

To install it:

=over 6

=item *

Browse to L<GitHub Devloper Token|https://github.com/settings/tokens> and create a token that has write access to repo level

=item *

Then run C<git config --global github.token TOKEN>

=back

C<--verbose>

Creates an audit trail by printing the calls to GHAPI and CLI executions.

C<--dryrun>

Optional: Prints all the verbose information, but doesn't actually execute anything - it impliles C<--verbose>

=back

=head2 PROTIP

Options can be applied with double or single dashes as you like, so both C<--verbose> and C<-verbose> are valid. You can even abbreveate the option name, it will remain valid as long as it's unique among all options.

B<Example:> since there are no other options except C<--verbose> that begins with
'v' it means that even C<-v> is valid.

=head1 DESCRIPTION

B<Copyright>

Lars Kruse, 2018, L<www.lakruzz.com|http://www.lakruzz.com>

B<License>

GPL v3.0

B<Repository>

L<github.com/lakruzz/perls|http://github.com/lakruzz/perls>

B<Support and feeback>

Use the L<issues|http://github.com/lakruzz/perls/issues> in the repo.

=cut
